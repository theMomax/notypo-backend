consumes:
- application/json
info:
  title: notypo streaming-api
  description: "The REST and Websocket api of the [notypo-game](https://www.github.com/theMomax/notypo). This documentation only addresses the functional part of the api. I.e. the **Responses** sections do not list default error codes like 400 and 500. This api allows CORS from a configurable list of URLs. The only `Content-Type` allowed is `application/json`."
  version: development
paths: {}
produces:
- application/json
schemes:
- http
swagger: "2.0"
tags:
  - name: stream management
    description: These operations are used to manage Streams. A Stream is defined by its Source, which is responsible for the Stream's content. Each connection to a Stream delivers the exact same content in the exact same order. Two Streams created from the same Source may have a different content. A Stream is deleted, when, ether a configurable amount of time has passed, since the last connection to the Stream had been established, or when the last connection to a Stream is closed. Connections to Streams can be closed via a request. If not closed by the client the connection is closed by the server after a configurable duration.
definitions:
    VersionResponse:
      type: object
      required:
        - version
        - git_commit
        - build_time
      properties:
        version:
          type: string
          example: v1.0
        git_commit:
          type: string
          example: 7690b981d5928b3cafb8783c3269e0b42dd73882
        build_time:
          type: string
          format: date-time
          example: 2019-03-07 19:51:58
    StreamType:
      description: The general type of the Stream. 
      type: string
      enum:
        - Random
    BasicCharacter:
      description: "This is a single character (golang: rune)"
      type: integer
      example: 97
    StreamSupplierDescription:
      type: object
      description: The generic description of a Stream.
      required:
        - type
      discriminator: type
      properties:
        type:
          $ref: "#/definitions/StreamType"
    Random:
      allOf:
        - $ref: "#/definitions/StreamSupplierDescription"
        - type: object
          properties:
            charset:
              description: The charset, the created Stream is limited to.
              type: array
              items:
                $ref: "#/definitions/BasicCharacter"
          required:
            - charset
    StreamID:
      type: integer
      format: int64
      example: 2797600008095813476
    StreamConnectionID:
      type: integer
      format: int64
      example: 8599217406194641707
paths:
  /version:
    get:
      tags:
        - versioning
      summary: Shows information about verison and build-time.
      description: Shows information about verison and build-time.
      responses:
        200:
          description: This build is a valid production-build.
          schema:
            $ref: "#/definitions/VersionResponse"
        503:
          description: This build is a test- or development-build.
  /stream:
    get:
      tags:
       - stream management
      summary: Provides a list of types of Streams.
      description: "The returned list contains all `types` of Streams implemented by this api-version."
      responses:
        200:
          description: The following types are implemented.
          schema:
            type: array
            items:
              $ref: "#/definitions/StreamType"
    post:
      tags:
        - stream management
      summary: Creates a Stream.
      description: "Creates a Stream, that fullfills the given requirements. This initialization defines the structure of the Stream's values. The client should keep this in mind, when requesting the Stream's content at `GET /stream/websocket/{id}`. The Stream's value's structures are defined as follows depending on its `StreamType`:

         * `Random` : BasicCharacter"
      parameters:
        - name: Description
          in: body
          required: true
          schema:
            $ref: "#/definitions/StreamSupplierDescription"
      responses:
        200:
          description: The information describing the type and properties of the requested Stream is valid. The Stream has been created successfully.
          schema:
            $ref: "#/definitions/StreamID"
        400:
          description: The given description does not fulfil the requirements of the given `type`.
        501:
          description: The server doesn't know the requested `type`.
  /stream/{id}:
    get:
      tags:
        - stream management
      summary: Opens a connection to a Stream.
      description: Opens a connection to a Stream, which streams the Stream's content from its beginning to the end, or until the connection is closed.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          description: "`StreamID`"
          example: 2797600008095813476
      responses:
        200:
          description: The requested Stream was found. The connection has been opened.
          schema:
            $ref: "#/definitions/StreamConnectionID"
        404:
          description: The requested Stream doesn't exist.
    delete:
      tags:
        - stream management
      summary: Closes a connection to a Stream.
      description: Closes a connection to a Stream, if the connection exists. If this connection is the only connection to the regarded Stream the Stream is deleted.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          description: "`StreamConnectionID`"
          example: 8599217406194641707
      responses:
        200:
          description: The described connection was ether closed, or it didn't exist.
  /stream/websocket/{id}:
    get:
      tags:
      - stream management
      summary: Establishes a websocket-connection, which enables the client to read the Stream's values.
      description: "The json-encoded websocket-connection enables the client to read the Stream's values. Those value's nature depends on the underlying `type` of the Stream as defined at `POST /stream`. The server can't just send with a fixed bandwith, since the required speed depends on the client. Thus, the client must send messages containing a positive integer `amount` in order to request the transfer of `amount` values from the Stream to the client. This communication may be asynchronous. The websocket-connection may be closed by the client without preceding notification. The server will close the connection, after a configurable timeout has passed, or if the requested Stream-connection was closed by timeout or due to a client's request."
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          description: "`StreamConnectionID`"
          example: 8599217406194641707
      responses:
        101:
          description: There is a connection with the given StreamConnectionID. A websocket-connection will be established.
        404:
          description: There is no connection with the given StreamConnectionID.